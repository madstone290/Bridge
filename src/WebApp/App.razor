@using Bridge.WebApp.Services.Identity
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@LayoutType">
                <NotAuthorized>
                    @if (_authenticated)
                    {
                        <NoPermission />
                    }
                    else
                    {
                        <RedirectToLogin />
                    }
                </NotAuthorized>
                <Authorizing>

                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <NotFound />
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private bool _authenticated;

    [Inject]
    public IAuthService AuthService { get; set; } = null!;

    public Type LayoutType {
        get
        {
            var route = NavManager.Uri.Remove(0, NavManager.BaseUri.Length);
            if (route.StartsWith("admin", StringComparison.OrdinalIgnoreCase))
                return typeof(AdminMainLayout);
            else
                return typeof(MainLayout);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthService.GetAuthStateAsync();
        _authenticated = authState.IsAuthenticated;

        Console.WriteLine(NavManager.Uri);

        NavManager.Uri.Contains("/admin");
    }



}
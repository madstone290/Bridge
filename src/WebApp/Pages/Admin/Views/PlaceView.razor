@using Bridge.Domain.Places.Enums
@using Bridge.WebApp.Pages.Admin.Models
@using Bridge.WebApp.Pages.Admin.ViewModels
@inject IPlaceViewModel VM

@attribute [Route(PageRoutes.Admin.PlaceView)]
<div class="page">
    <MudContainer>
        <div class="container">
            <div class="toolbar">
                <MudText Typo="Typo.h5">기본 정보</MudText>
                <MudSpacer />
                @if (VM.BaseInfoReadOnly)
                {
                    <MudButton Class="button" Variant="Variant.Outlined" OnClick="VM.OnEditBaseInfoClick">수정</MudButton>
                }
                else
                {
                    <MudButton Class="button" Variant="Variant.Outlined" OnClick="VM.OnCancelBaseInfoClick">취소</MudButton>
                    <MudButton Class="button" Variant="Variant.Outlined" OnClick="VM.OnSaveBaseInfoClick">저장</MudButton>
                }
            </div>
            <MudDivider Class="divider" />
            <MudForm ValidationDelay="0"
                     @bind-IsValid="VM.IsBaseInfoValid" >
                <MudGrid Spacing="1">
                    <MudItem xs="12">
                        <MudImage Src="@VM.Place.ImageUrl" Width="200" Height="200" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton HtmlTag="label"
                                   Disabled="@VM.BaseInfoReadOnly"
                                   Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   FullWidth="true"
                                   StartIcon="@Icons.Filled.CloudUpload"
                                   for="fileInput">이미지</MudButton>
                        <InputFile id="fileInput" hidden OnChange="VM.OnUploadFileChange" accept=".jpg, .png" />
                    </MudItem>
                    <MudItem xs="12">
                        <AdvSelect @bind-Value="VM.Place.Type"
                                   T="PlaceType"
                                   Validation="@(VM.GetValidation(x => x.Type))"
                                   Label="타입"
                                   ReadOnly="VM.BaseInfoReadOnly">
                            @{
                                foreach (var placeType in Enum.GetValues<PlaceType>())
                                {
                                    <MudSelectItem Value="@placeType"></MudSelectItem>
                                }
                            }
                        </AdvSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <AdvTextField @bind-Value="VM.Place.Name"
                                      Validation="@(VM.GetValidation(x=> x.Name))"
                                      Label="장소명"
                                      ShirinkLabel="true"
                                      ReadOnly="VM.BaseInfoReadOnly" />
                    </MudItem>
                    <MudItem xs="12">
                        <AdvTextField @bind-Value="VM.Place.BaseAddress"
                                      Label="기본주소"
                                      ReadOnly="VM.BaseInfoReadOnly"
                                      ShirinkLabel="true"
                                      Validation="@(VM.GetValidation(x=> x.BaseAddress))" />
                    </MudItem>
                    <MudItem xs="12">
                        <AdvTextField @bind-Value="VM.Place.DetailAddress"
                                      Label="상세주소"
                                      ReadOnly="VM.BaseInfoReadOnly"
                                      ShirinkLabel="true"
                                      Validation="@(VM.GetValidation(x=> x.DetailAddress))" />
                    </MudItem>
                    <MudItem xs="12">
                        <AdvTextField @bind-Value="VM.Place.ContactNumber"
                                      Validation="@(VM.GetValidation(x=> x.ContactNumber))"
                                      Label="연락처"
                                      ShirinkLabel="true"
                                      ReadOnly="VM.BaseInfoReadOnly" />
                    </MudItem>
                    <MudItem xs="12">
                        <AdvSelect @bind-SelectedValues="VM.Place.Categories"
                                   T="PlaceCategory"
                                   MultiSelection="true"
                                   Label="카테고리"
                                   ReadOnly="VM.BaseInfoReadOnly"
                                   ShirinkLabel="true"
                                   Validation="@(VM.GetValidation(x=> x.Categories))">
                            @foreach (var category in Enum.GetValues<PlaceCategory>())
                            {
                                <MudSelectItem Value="category"></MudSelectItem>
                            }
                        </AdvSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </div>
        <div class="container">
            <div class="toolbar">
                <MudText Typo="Typo.h5">영업시간</MudText>
                <MudSpacer />
                @if (VM.OpeningTimeReadOnly)
                {
                    <MudButton Class="button" Variant="Variant.Outlined" OnClick="VM.OnEditOpeningTimeClick">수정</MudButton>
                }
                else
                {
                    <MudButton Class="button" Variant="Variant.Outlined" OnClick="VM.OnCancelOpeningTimeClick">취소</MudButton>
                    <MudButton Class="button" Variant="Variant.Outlined" OnClick="VM.OnSaveOpeningTimeClick">저장</MudButton>
                }
            </div>
            <MudDivider Class="divider" />
            <MudForm @bind-IsValid="VM.IsOpeningTimeValid"
                ValidationDelay="0">
                <MudGrid Spacing="1">
                    <MudItem xs="12">
                        @foreach (var openingTime in VM.Place.OpeningTimes)
                        {
                            <Bridge.WebApp.Pages.Admin.Views.Components.OpeningTimeView OpeningTime="openingTime" IsReadOnly="VM.OpeningTimeReadOnly" />
                        }
                    </MudItem>
                </MudGrid>
            </MudForm>
        </div>

        <div class="container last">
            <div class="toolbar">
                <MudText Typo="Typo.h5">제품</MudText>
                <MudSpacer />
                <MudButton Class="button" Variant="Variant.Outlined" OnClick="VM.OnCreateProductClick">추가</MudButton>
            </div>
            <MudDivider Class="divider" />
            <MudToolBar>
                <div class="search-field">
                    <AdvTextField T="string"
                                  @bind-Value="VM.SearchText"
                                  Placeholder="검색어 입력">
                    </AdvTextField>
                </div>
                <MudButton Class="button" Variant="Variant.Outlined">검색</MudButton>
            </MudToolBar>

            <MudTable T="Product"
                      RowsPerPage="VM.RowsPerPage"
                      Hover="true"
                      Dense="true"
                      Items="VM.Products">
                <HeaderContent>
                    <MudTh>타입</MudTh>
                    <MudTh>제품명</MudTh>
                    <MudTh>가격</MudTh>
                    <MudTh>카테고리</MudTh>
                    <MudTh>메뉴</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="타입">
                        <MudHighlighter Text="@context.TypeString" HighlightedText="@VM.SearchText" />
                    </MudTd>
                    <MudTd DataLabel="제품명">
                        <MudHighlighter Text="@context.Name" HighlightedText="@VM.SearchText" />
                    </MudTd>
                    <MudTd DataLabel="가격">
                        <MudHighlighter Text="@context.PriceString" HighlightedText="@VM.SearchText" />
                    </MudTd>
                    <MudTd DataLabel="카테고리">
                        <MudHighlighter Text="@context.CategoriesString" HighlightedText="@VM.SearchText" />
                    </MudTd>
                    <MudTd>
                        <MudMenu Label="메뉴"
                                 EndIcon="@Icons.Filled.KeyboardArrowDown"
                                 Variant="Variant.Outlined">
                            <MudMenuItem @onclick="@(async () => await VM.OnUpdateProductClick(context))">수정</MudMenuItem>
                            <MudMenuItem @onclick="@(async () => await VM.OnDiscardProductClick(context))">폐기</MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <TablePagination TotalCount="VM.TotalCount" PageCount="VM.PageCount"
                                     PageNumber="VM.PageNumber" PageNumberChanged="VM.OnPageNumberChanged"
                                     RowsPerPage="VM.RowsPerPage" RowsPerPageChanged="VM.OnRowsPerPageChanged" />
                </PagerContent>
            </MudTable>
        </div>
    </MudContainer>
</div>

@code {
    [Parameter]
    public long PlaceId{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        VM.PlaceId = PlaceId;
        await VM.Initialize();
    }

}
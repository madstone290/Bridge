@using Bridge.WebApp.Pages.Common.Models
@using Bridge.WebApp.Pages.Home.ViewModels
@using Bridge.WebApp.Pages.Home.Views.Components
@attribute [Route("/mobile")]
@attribute [AllowAnonymous]
@inject IIndexViewModel VM
@implements IAsyncDisposable

<PageTitle>플차</PageTitle>

<div class="page">
    <div class="search-container">
        <div class="address-line">
            <MudText Color="Color.Info">@VM.CurrentAddress</MudText>
        </div>

        <div class="search-line"  >
            <AdvTextField @ref="_searchField"
                          Placeholder="검색어를 입력하세요"
                          T="string"
                          DisableUnderLine="true"
                          @bind-Value="VM.SearchText"
                          OnKeyUp="VM.OnSearchFieldKeyUp" />
            <MudIconButton Icon="@Icons.Material.Outlined.Search" OnClick="VM.OnSearchClick" />
            <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="VM.OnClearClick" />
        </div>

        <div class="search-result">
             @if (VM.PlaceSearched && !VM.Places.Any())
            {
                <NoSearchResult />
            }
            else
            {
                <PlaceResultList ListElementId="@VM.PlaceListElementId"
                             Places="@VM.Places"
                             OnPlaceClicked="@(new EventCallback<Place>(this, VM.OnPlaceSelected))"
                             SelectedPlace="@VM.SelectedPlace" />
            }
        </div>
    </div>

    <div id="@VM.MapElementId" style="width:100%; height:60vh;">
    </div>
</div>
@code {
    private MudTextField<string>? _searchField;

    protected override async Task OnInitializedAsync()
    {
        VM.Receiver = this;
        VM.SearchCompleted = new EventCallback(this, () =>
        {
            _searchField?.BlurAsync();
        });
        await VM.InitAsync();
    }


    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await VM.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}
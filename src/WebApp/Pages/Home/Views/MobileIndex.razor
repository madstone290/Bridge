@using Bridge.WebApp.Pages.Home.ViewModels
@attribute [Route("/mobile")]
@attribute [AllowAnonymous]
@inject IIndexViewModel VM
@implements IAsyncDisposable

<PageTitle>플차</PageTitle>

<div class="page">
    <div class="search-container">
        <div class="address-line">
            <MudText Color="Color.Info">@VM.CurrentAddress</MudText>
        </div>

        <div class="search-line"  >
            <AdvTextField @ref="_searchField"
                          Placeholder="검색어를 입력하세요"
                          T="string"
                          DisableUnderLine="true"
                          @bind-Value="VM.SearchText"
                          OnKeyUp="VM.OnSearchFieldKeyUp" />
            <MudIconButton Icon="@Icons.Material.Outlined.Search" OnClick="VM.OnSearchClick" />
            <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="VM.OnClearClick" />
        </div>

        @if (VM.PlaceSearched && !VM.Places.Any())
        {
            <div class="place-list">
                <div style="padding:20px;">
                    검색결과가 없습니다
                </div>
            </div>
        }
        else
        {
            <MudList id="@VM.PlaceListElementId" Class="place-list" Clickable="true">
                @foreach (var place in VM.Places)
                {
                    <MudListItem id="@place.Id" Class="list-item" Value="place" OnClick="@(()=> VM.OnPlaceSelected(place))">
                        
                    </MudListItem>
                }
            </MudList>
        }
    </div>

    <div id="@VM.MapElementId" style="width:100%; height:35vh;">
    </div>
</div>
@code {
    private MudTextField<string>? _searchField;

    protected override async Task OnInitializedAsync()
    {
        VM.Receiver = this;
        VM.SearchCompleted = new EventCallback(this, () =>
        {
            _searchField?.BlurAsync();
        });
        await VM.InitAsync();
    }


    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await VM.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}
@using Bridge.WebApp.Pages.Home.ViewModels
@attribute [Route(PageRoutes.Home)]
@attribute [AllowAnonymous]
@inject IIndexViewModel VM

<PageTitle>플차</PageTitle>

<div class="page">
    <MudContainer Class="search-container" MaxWidth="MaxWidth.Large">
        <div class="address-line">
            <MudButton Style="flex: 1 1 auto;"
                       Color="Color.Info"
                       OnClick="VM.ShowLocationSelectionAsync">
                @VM.CurrentAddress
            </MudButton>
        </div>

        <div style="display:flex; flex-direction:row;">
            <div style="min-width:600px; max-width:600px;">
                <div class="search-line">
                    <MudTextField @ref="_searchField"
                                  Placeholder="검색어를 입력하세요"
                                  T="string"
                                  @bind-Value="VM.SearchText"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Variant="Variant.Outlined"
                                  OnKeyUp="VM.Handle_KeyUp" />
                </div>

                @if (VM.Searched && !VM.Places.Any())
                {
                    <div style="padding:10px;">
                        <MudText>검색결과가 없습니다</MudText>
                    </div>
                }
                else
                {
                    <MudList id="mudlist" @bind-SelectedValue="VM.SelectedListItem" Clickable="true" Style="overflow-y:scroll; height:600px;">
                        @foreach (var place in VM.Places)
                        {
                            <MudListItem id="@place.Id" Class="list-item" Value="place" OnClick="@(()=> VM.Handle_PlaceSelected(place))">
                                <Bridge.WebApp.Pages.Home.Components.PlaceListItem Place="place"/>
                            </MudListItem>
                        }
                    </MudList>
                }
            </div>
            <div id="@VM.MapElementId" style="width:100%; height:600px; margin:4px;">
            </div>
        </div>

    </MudContainer>
</div>
@code {
    private MudTextField<string>? _searchField;

    protected override async Task OnInitializedAsync()
    {
        VM.Receiver = this;
        VM.SearchCompleted = new EventCallback(this, () =>
        {
            _searchField?.BlurAsync();
        });
        await VM.InitAsync();
    }
}